{"$schema": "http://json-schema.org/draft-04/schema",
  title: "JSMus Score",
  description: "A sparse JSON representation of a musical Score.",
  type: "object",
  required: ["title", "composer", "meter" "data"],
  properties: {
    title: {
      type: "string",
      description: "A title for the score"
    },
    composer: {
      type: "string",
      description: "The person who originally composed the score"
    },
    arranger: {
      type: "string",
      description: "The person who totally screwed up the composer's intentions"
    },
    meter: {
      type: "string"
    },
    instruments: {
      type: "array",
      description: "A list of the instruments that will be used in the score, in the order in which they should display top-to-bottom.",
      items: {
        type:"string"
      }
    },
    "deltas": {
      "type": "object"
      "id": "#",
      "required": true,
      "patternProperties": {
        "^(-)?(\d+)(?:\D*)(\d+)?(?:\D*)(\d+)?$" : {
          type: "object",
          description: "A 'ScoreDelta' - a chunk of data indicating what instruments should play what notes, and for how long. The key pattern for these objects is a rational number that indicates a beat in the music, such as '1', '3/2', '1 1/2', '1&1/2' (all but the first are the same number). A weird string like '1*1+2' is *expected* to be equivalent to '3/2' or '1 1/2' - interpretation depends strictly on how many integer components were listed (1, 2 or 3 integer components will be interpreted as 'integer', 'num/denom' or 'integer + num/denom' respectively)."
          "required": [],
          "properties": {
            "duration": {
              type: "string",
              description: "A rational number describing how long",
              pattern: "^(\d+)(?:\D*)(\d+)?(?:\D*)(\d+)?$"
            }
          },
          "patternProperties": {
            "^(-)?(\d+)$": {
              type:"object"
            }// A positive or negative integer corresponsinding to a pitch class, defined from C4 = 0.
          }
        }
      }
    }
  }
}